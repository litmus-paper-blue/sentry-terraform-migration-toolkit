#!/usr/bin/env python3
"""
Terraform configuration generation for Sentry resources
"""

import os
import json
from pathlib import Path
from typing import Dict, List, Any, Optional
from jinja2 import Environment, FileSystemLoader, BaseLoader, DictLoader
import logging

from .config import Config
from .utils import (
    safe_resource_name,
    safe_filename,
    ensure_directory,
    sanitize_terraform_string,
    generate_import_id
)

logger = logging.getLogger(__name__)

# Default templates as strings (fallback if no template directory)
DEFAULT_TEMPLATES = {
    'main.tf.j2': '''terraform {
  required_version = "{{ terraform_version }}"
  required_providers {
    sentry = {
      source  = "jianyuan/sentry"
      version = "{{ provider_version }}"
    }
  }
}

provider "sentry" {
  token    = var.sentry_auth_token
  base_url = var.sentry_base_url
}
''',
    
    'variables.tf.j2': '''variable "sentry_auth_token" {
  description = "Sentry authentication token"
  type        = string
  sensitive   = true
}

variable "sentry_base_url" {
  description = "Sentry base URL"
  type        = string
  default     = "{{ base_url }}"
}

variable "sentry_org_slug" {
  description = "Sentry organization slug"
  type        = string
  default     = "{{ org_slug }}"
}
''',

    'teams.tf.j2': '''{% for team in teams %}
resource "sentry_team" "{{ team.resource_name }}" {
  organization = var.sentry_org_slug
  name         = "{{ team.name | sanitize }}"
  slug         = "{{ team.slug }}"
}
{% endfor %}

{% for team in teams %}
{% for member in team.members %}
resource "sentry_team_member" "{{ team.resource_name }}_{{ member.resource_name }}" {
  organization = var.sentry_org_slug
  team         = sentry_team.{{ team.resource_name }}.id
  email        = "{{ member.email }}"
  role         = "{{ member.role }}"
}
{% endfor %}
{% endfor %}
''',

    'projects.tf.j2': '''{% for project in projects %}
resource "sentry_project" "{{ project.resource_name }}" {
  organization = var.sentry_org_slug
  name         = "{{ project.name | sanitize }}"
  slug         = "{{ project.slug }}"
  platform     = "{{ project.platform }}"
  {% if project.teams %}
  teams        = [{{ project.teams | join(', ') }}]
  {% endif %}
  
  # Optional settings
  {% if project.resolve_age %}
  resolve_age = {{ project.resolve_age }}
  {% endif %}
}
{% endfor %}
''',

    'imports.sh.j2': '''#!/bin/bash
# Terraform import script for Sentry resources
# Generated by sentry-terraform-discovery

set -e

echo "Starting Terraform imports for Sentry resources..."

{% for command in import_commands %}
echo "Importing {{ command.description }}..."
{{ command.command }}
{% endfor %}

echo "All imports completed successfully!"
echo "Run 'terraform plan' to verify the import was successful."
'''
}

class TerraformGenerator:
    """Generate Terraform configurations from Sentry data"""
    
    def __init__(self, config: Config):
        self.config = config
        self.output_dir = Path(config.terraform.output_dir)
        
        # Setup Jinja2 environment
        if config.terraform.template_dir:
            loader = FileSystemLoader(config.terraform.template_dir)
        else:
            loader = DictLoader(DEFAULT_TEMPLATES)
        
        self.jinja_env = Environment(
            loader=loader,
            trim_blocks=True,
            lstrip_blocks=True
        )
        
        # Add custom filters
        self.jinja_env.filters['sanitize'] = sanitize_terraform_string
        self.jinja_env.filters['safe_name'] = safe_resource_name
        
        logger.info(f"TerraformGenerator initialized with output_dir: {self.output_dir}")
    
    def generate(self, data: Dict[str, Any]) -> List[str]:
        """Generate all Terraform files"""
        logger.info("Starting Terraform generation")
        
        # Ensure output directory exists
        ensure_directory(self.output_dir)
        
        # Process data
        processed_data = self._process_data(data)
        
        generated_files = []
        
        if self.config.terraform.module_style:
            generated_files.extend(self._generate_modules(processed_data))
        else:
            generated_files.extend(self._generate_flat_files(processed_data))
        
        # Generate import script
        if self.config.terraform.import_script:
            import_file = self._generate_import_script(processed_data)
            generated_files.append(import_file)
        
        logger.info(f"Generated {len(generated_files)} files")
        return generated_files
    
    def preview(self, data: Dict[str, Any]):
        """Preview what would be generated without writing files"""
        logger.info("Generating preview")
        processed_data = self._process_data(data)
        
        print("\n📁 Files that would be generated:")
        
        if self.config.terraform.module_style:
            print("   modules/")
            print("   ├── sentry-team/")
            print("   │   ├── main.tf")
            print("   │   ├── variables.tf")
            print("   │   └── outputs.tf")
            print("   ├── sentry-project/")
            print("   │   ├── main.tf")
            print("   │   ├── variables.tf")
            print("   │   └── outputs.tf")
            print("   └── environments/")
            print("       └── main.tf")
        else:
            print("   ├── main.tf")
            print("   ├── variables.tf")
            print("   ├── teams.tf")
            print("   ├── projects.tf")
            if self.config.terraform.include_outputs:
                print("   ├── outputs.tf")
        
        if self.config.terraform.import_script:
            print("   └── imports.sh")
        
        print(f"\n📊 Resources summary:")
        print(f"   Teams: {len(processed_data['teams'])}")
        print(f"   Projects: {len(processed_data['projects'])}")
        total_members = sum(len(team.get('members', [])) for team in processed_data['teams'])
        print(f"   Team members: {total_members}")
    
    def _process_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Process and enhance data for template generation"""
        org = data.get('organization', {})
        teams = data.get('teams', [])
        projects = data.get('projects', [])
        
        # Process teams
        processed_teams = []
        for team in teams:
            processed_team = {
                'id': team['id'],
                'slug': team['slug'],
                'name': team['name'],
                'resource_name': safe_resource_name(team['slug']),
                'members': []
            }
            
            # Process team members
            for member in team.get('members', []):
                processed_member = {
                    'email': member['email'],
                    'role': member.get('role', 'member'),
                    'resource_name': safe_resource_name(member['email'].split('@')[0])
                }
                processed_team['members'].append(processed_member)
            
            processed_teams.append(processed_team)
        
        # Process projects
        processed_projects = []
        for project in projects:
            processed_project = {
                'id': project['id'],
                'slug': project['slug'],
                'name': project['name'],
                'platform': project.get('platform', 'other'),  # Use platform as-is
                'resource_name': safe_resource_name(project['slug']),
                'teams': []
            }
            
            # Map project teams to Terraform references
            for team in project.get('teams', []):
                team_resource_name = safe_resource_name(team['slug'])
                terraform_ref = f"sentry_team.{team_resource_name}.id"
                processed_project['teams'].append(terraform_ref)
            
            # Add optional settings
            details = project.get('details', {})
            if 'resolveAge' in details:
                processed_project['resolve_age'] = details['resolveAge']
            
            processed_projects.append(processed_project)
        
        return {
            'organization': org,
            'teams': processed_teams,
            'projects': processed_projects,
            'terraform_version': self.config.terraform.terraform_version,
            'provider_version': self.config.terraform.provider_version,
            'base_url': self.config.sentry.base_url,
            'org_slug': org.get('slug', '')
        }
    
    def _generate_flat_files(self, data: Dict[str, Any]) -> List[str]:
        """Generate flat Terraform files"""
        generated_files = []
        
        # Main configuration
        main_content = self._render_template('main.tf.j2', data)
        main_file = self.output_dir / 'main.tf'
        self._write_file(main_file, main_content)
        generated_files.append(str(main_file))
        
        # Variables
        variables_content = self._render_template('variables.tf.j2', data)
        variables_file = self.output_dir / 'variables.tf'
        self._write_file(variables_file, variables_content)
        generated_files.append(str(variables_file))
        
        # Teams
        if data['teams']:
            teams_content = self._render_template('teams.tf.j2', data)
            teams_file = self.output_dir / 'teams.tf'
            self._write_file(teams_file, teams_content)
            generated_files.append(str(teams_file))
        
        # Projects
        if data['projects']:
            projects_content = self._render_template('projects.tf.j2', data)
            projects_file = self.output_dir / 'projects.tf'
            self._write_file(projects_file, projects_content)
            generated_files.append(str(projects_file))
        
        # Outputs (optional)
        if self.config.terraform.include_outputs:
            outputs_content = self._generate_outputs(data)
            outputs_file = self.output_dir / 'outputs.tf'
            self._write_file(outputs_file, outputs_content)
            generated_files.append(str(outputs_file))
        
        return generated_files
    
    def _generate_modules(self, data: Dict[str, Any]) -> List[str]:
        """Generate modular Terraform structure"""
        # TODO: Implement module generation
        logger.warning("Module generation not yet implemented, falling back to flat files")
        return self._generate_flat_files(data)
    
    def _generate_import_script(self, data: Dict[str, Any]) -> str:
        """Generate Terraform import script"""
        import_commands = []
        org_slug = data['org_slug']
        
        # Team imports
        for team in data['teams']:
            import_commands.append({
                'description': f"team {team['slug']}",
                'command': f"terraform import sentry_team.{team['resource_name']} {org_slug}/{team['slug']}"
            })
            
            # Team member imports
            for member in team['members']:
                member_resource = f"{team['resource_name']}_{member['resource_name']}"
                import_commands.append({
                    'description': f"team member {member['email']} in {team['slug']}",
                    'command': f"terraform import sentry_team_member.{member_resource} {org_slug}/{team['slug']}/{member['email']}"
                })
        
        # Project imports - using same format as teams with org_slug
        for project in data['projects']:
            import_commands.append({
                'description': f"project {project['slug']}",
                'command': f"terraform import sentry_project.{project['resource_name']} {org_slug}/{project['slug']}"
            })
        
        script_data = {**data, 'import_commands': import_commands}
        script_content = self._render_template('imports.sh.j2', script_data)
        
        script_file = self.output_dir / 'imports.sh'
        self._write_file(script_file, script_content)
        
        # Make script executable
        script_file.chmod(0o755)
        
        return str(script_file)
    
    def _generate_outputs(self, data: Dict[str, Any]) -> str:
        """Generate outputs.tf content"""
        outputs = []
        
        # Team outputs
        for team in data['teams']:
            outputs.append(f'''output "team_{team['resource_name']}_id" {{
  description = "ID of team {team['name']}"
  value       = sentry_team.{team['resource_name']}.id
}}''')
        
        # Project outputs
        for project in data['projects']:
            outputs.append(f'''output "project_{project['resource_name']}_id" {{
  description = "ID of project {project['name']}"
  value       = sentry_project.{project['resource_name']}.id
}}

output "project_{project['resource_name']}_slug" {{
  description = "Slug of project {project['name']}"
  value       = sentry_project.{project['resource_name']}.slug
}}''')
        
        return '\n\n'.join(outputs)
    
    def _render_template(self, template_name: str, data: Dict[str, Any]) -> str:
        """Render Jinja2 template with data"""
        try:
            template = self.jinja_env.get_template(template_name)
            return template.render(**data)
        except Exception as e:
            logger.error(f"Error rendering template {template_name}: {e}")
            raise
    
    def _write_file(self, file_path: Path, content: str):
        """Write content to file"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            logger.debug(f"Written file: {file_path}")
        except Exception as e:
            logger.error(f"Error writing file {file_path}: {e}")
            raise